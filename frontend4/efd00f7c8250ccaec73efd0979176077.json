{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { AppSettings } from 'src/app/config/app';\nimport { Exam } from 'src/app/models/Exam';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/exam.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/material/dialog\";\nimport * as i5 from \"@angular/material/button\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/grid-list\";\nimport * as i9 from \"@angular/material/select\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@rxweb/reactive-form-validators\";\nimport * as i12 from \"@angular/common\";\n\nfunction ExamFormComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter first name \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExamFormComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field must have at most 90 characters. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExamFormComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" This field must have at least 3 characters. \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ExamFormComponent_mat_form_field_16_mat_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const subject_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", subject_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", subject_r6.name, \" \");\n  }\n}\n\nfunction ExamFormComponent_mat_form_field_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-form-field\")(1, \"mat-select\", 13);\n    i0.ɵɵtemplate(2, ExamFormComponent_mat_form_field_16_mat_option_2_Template, 2, 2, \"mat-option\", 9);\n    i0.ɵɵpipe(3, \"json\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(3, 1, ctx_r3.dataListSubjects));\n  }\n}\n\nfunction ExamFormComponent_mat_option_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const animal_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", animal_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", animal_r7.name, \" \");\n  }\n}\n\nexport let ExamFormComponent = /*#__PURE__*/(() => {\n  class ExamFormComponent {\n    constructor(_service, fb, _snackBar, dialogRef, data) {\n      this._service = _service;\n      this.fb = fb;\n      this._snackBar = _snackBar;\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.titleButton = 'Save';\n      this.title = 'Add Exam';\n      this.wasFormChanged = false;\n      this.exam = new Exam();\n      this.dataListSubjects = [];\n      this.display = new FormControl(\"\", Validators.required);\n      this.file_list = [];\n      console.log(\"TCL: ExamFormComponent -> data\", data);\n      this.exam = data.data;\n      this.dataListSubjects = data.subjects;\n    }\n\n    ngOnInit() {\n      this.createFormBuilder();\n      this.breakpoint = window.innerWidth <= 600 ? 1 : 2; // Breakpoint observer code\n    }\n\n    createFormBuilder() {\n      var _a, _b, _c, _d;\n\n      if (((_a = this.exam) === null || _a === void 0 ? void 0 : _a.id) > 0) {\n        this.titleButton = 'Edit';\n        this.title = 'Edit Exam';\n      }\n\n      this.form = this.fb.group({\n        id: (_b = this.exam) === null || _b === void 0 ? void 0 : _b.id,\n        name: [(_c = this.exam) === null || _c === void 0 ? void 0 : _c.name, [Validators.required, Validators.minLength(5), Validators.maxLength(100)]],\n        subjectFather: [(_d = this.exam) === null || _d === void 0 ? void 0 : _d.subjectFather, [Validators.required]]\n      });\n      this.onCreateGroupFormValueChange();\n    }\n\n    onAddCus() {\n      this.markAsDirty(this.form);\n    }\n\n    openDialog() {\n      this.closeDialog(null);\n    }\n\n    closeDialog(res, method = 'create') {\n      this.dialogRef.close({\n        event: 'close',\n        data: res,\n        method\n      });\n    }\n\n    onResize(event) {\n      this.breakpoint = event.target.innerWidth <= 600 ? 1 : 2;\n    }\n\n    markAsDirty(group) {\n      group.markAsDirty();\n\n      for (const i in group.controls) {\n        group.controls[i].markAsDirty();\n      }\n    }\n\n    formChanged() {\n      this.wasFormChanged = true;\n    }\n\n    onSubmit() {\n      this.validateForm();\n    }\n\n    validateForm() {\n      if (!this.form.valid) {\n        return;\n      }\n\n      if (this.form.controls.id.value > 0) {\n        this.edit();\n      } else {\n        this.create();\n      }\n    }\n\n    create() {\n      this._service.create(this.form.value).subscribe(res => {\n        this.checkResponse(AppSettings.GENERIC_MESSAGE_CREATED, 'create', res);\n      });\n    }\n\n    edit() {\n      this._service.update(this.form.value).subscribe(res => {\n        this.checkResponse(AppSettings.GENERIC_MESSAGE_UPDATED, 'edit', res);\n      });\n    }\n\n    checkResponse(message, method, response) {\n      this.form.reset();\n      this.openSnackBar(message, 'OK');\n      this.closeDialog(response, method);\n    }\n\n    openSnackBar(message, action) {\n      this._snackBar.open(message, action, {\n        duration: 3000\n      });\n    }\n\n    onCreateGroupFormValueChange() {\n      this.form.valueChanges.subscribe(value => {// console.log(value);\n      });\n    }\n\n  }\n\n  ExamFormComponent.ɵfac = function ExamFormComponent_Factory(t) {\n    return new (t || ExamFormComponent)(i0.ɵɵdirectiveInject(i1.ExamService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MatSnackBar), i0.ɵɵdirectiveInject(i4.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA, 8));\n  };\n\n  ExamFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExamFormComponent,\n    selectors: [[\"app-exam-form\"]],\n    decls: 29,\n    vars: 10,\n    consts: [[1, \"add-title\"], [1, \"primary\"], [3, \"formGroup\", \"change\", \"ngSubmit\"], [\"cols\", \"2\", \"rowHeight\", \"85px\", 3, \"cols\", \"resize\"], [1, \"text-inside\"], [\"matInput\", \"\", \"placeholder\", \"First Name\", \"formControlName\", \"name\", \"required\", \"\"], [4, \"ngIf\"], [\"appearance\", \"fill\"], [\"required\", \"\", \"placeholder\", \"Subject\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"btn-sec\"], [\"mat-raised-button\", \"\", \"type\", \"submit\", \"color\", \"primary\", 1, \"Update-btn\", 3, \"disabled\"], [\"mat-raised-button\", \"\", \"type\", \"button\", 1, \"Discard-btn\", 3, \"click\"], [\"placeholder\", \"Subject\"], [3, \"value\"]],\n    template: function ExamFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"h2\", 1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\")(5, \"form\", 2);\n        i0.ɵɵlistener(\"change\", function ExamFormComponent_Template_form_change_5_listener() {\n          return ctx.formChanged();\n        })(\"ngSubmit\", function ExamFormComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"mat-grid-list\", 3);\n        i0.ɵɵlistener(\"resize\", function ExamFormComponent_Template_mat_grid_list_resize_6_listener($event) {\n          return ctx.onResize($event);\n        }, false, i0.ɵɵresolveWindow);\n        i0.ɵɵelementStart(7, \"mat-grid-tile\")(8, \"div\", 4)(9, \"mat-form-field\");\n        i0.ɵɵelement(10, \"input\", 5);\n        i0.ɵɵtemplate(11, ExamFormComponent_mat_error_11_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(12, ExamFormComponent_mat_error_12_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵtemplate(13, ExamFormComponent_mat_error_13_Template, 2, 0, \"mat-error\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"mat-grid-tile\")(15, \"div\", 4);\n        i0.ɵɵtemplate(16, ExamFormComponent_mat_form_field_16_Template, 4, 3, \"mat-form-field\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(17, \"mat-form-field\", 7)(18, \"mat-label\");\n        i0.ɵɵtext(19, \"Favorite animal\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-select\", 8)(21, \"mat-option\");\n        i0.ɵɵtext(22, \"--\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(23, ExamFormComponent_mat_option_23_Template, 2, 2, \"mat-option\", 9);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(24, \"div\", 10)(25, \"button\", 11);\n        i0.ɵɵtext(26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function ExamFormComponent_Template_button_click_27_listener() {\n          return ctx.openDialog();\n        });\n        i0.ɵɵtext(28, \"Cancel\");\n        i0.ɵɵelementEnd()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"cols\", ctx.breakpoint);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.controls.name.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.controls.name.hasError(\"maxlength\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.form.controls.name.hasError(\"minlength\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataListSubjects);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.dataListSubjects);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.form.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.titleButton);\n      }\n    },\n    dependencies: [i5.MatButton, i6.MatError, i6.MatFormField, i6.MatLabel, i7.MatInput, i8.MatGridList, i8.MatGridTile, i9.MatSelect, i10.MatOption, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.FormGroupDirective, i2.FormControlName, i11.ɵk, i11.ɵa, i11.ɵe, i12.NgForOf, i12.NgIf, i12.JsonPipe]\n  });\n  return ExamFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}